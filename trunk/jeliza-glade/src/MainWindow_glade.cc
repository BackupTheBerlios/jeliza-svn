// generated 2007/3/10 15:18:21 CET by tobias@donald.(none)
// using glademm V2.6.0
//
// DO NOT EDIT THIS FILE ! It was created using
// glade-- /media/hdb5/workspace/JEliza/trunk/trunk/jeliza-glade/jeliza-glade.glade
// for gtk 2.8.17 and gtkmm 2.2.12
//
// Please modify the corresponding derived classes in ./src/MainWindow.cc


#if defined __GNUC__ && __GNUC__ < 3
#error This program will crash if compiled with g++ 2.x
// see the dynamic_cast bug in the gtkmm FAQ
#endif //
#include "config.h"
/*
 * Standard gettext macros.
 */
#ifdef ENABLE_NLS
#  include <libintl.h>
#  undef _
#  define _(String) dgettext (GETTEXT_PACKAGE, String)
#  ifdef gettext_noop
#    define N_(String) gettext_noop (String)
#  else
#    define N_(String) (String)
#  endif
#else
#  define textdomain(String) (String)
#  define gettext(String) (String)
#  define dgettext(Domain,Message) (Message)
#  define dcgettext(Domain,Message,Type) (Message)
#  define bindtextdomain(Domain,Directory) (Domain)
#  define _(String) (String)
#  define N_(String) (String)
#endif
#include "MainWindow_glade.hh"
#include <gdk/gdkkeysyms.h>
#include <gtkmm/accelgroup.h>
#include <gtkmm/imagemenuitem.h>
#include <gtk/gtkimagemenuitem.h>
#include <gtkmm/menuitem.h>
#include <gtkmm/menu.h>
#include <gtkmm/menubar.h>
#include <gtkmm/textview.h>
#include <gtkmm/scrolledwindow.h>
#include <gtkmm/label.h>
#include <gtkmm/entry.h>
#include <gtkmm/button.h>
#include <gtkmm/box.h>

MainWindow_glade::MainWindow_glade(
) : Gtk::Window(Gtk::WINDOW_TOPLEVEL)
{  MainWindow = this;
   gmm_data = new GlademmData(get_accel_group());
   
   Gtk::ImageMenuItem *new = NULL;
   Gtk::ImageMenuItem *open = NULL;
   Gtk::ImageMenuItem *save = NULL;
   Gtk::MenuItem *separatormenuitem1 = NULL;
   Gtk::ImageMenuItem *close = NULL;
   Gtk::Menu *menuitem4_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem4 = NULL;
   Gtk::ImageMenuItem *cut = NULL;
   Gtk::ImageMenuItem *copy = NULL;
   Gtk::ImageMenuItem *paste = NULL;
   Gtk::ImageMenuItem *delete = NULL;
   Gtk::Menu *menuitem5_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem5 = NULL;
   Gtk::MenuItem *einstellungen = NULL;
   Gtk::Menu *optionen1_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *optionen1 = NULL;
   Gtk::MenuItem *info = NULL;
   Gtk::Menu *menuitem7_menu = Gtk::manage(new class Gtk::Menu());
   Gtk::MenuItem *menuitem7 = NULL;
   Gtk::MenuBar *menubar1 = Gtk::manage(new class Gtk::MenuBar());
   Gtk::TextView *textview2 = Gtk::manage(new class Gtk::TextView());
   Gtk::ScrolledWindow *scrolledwindow3 = Gtk::manage(new class Gtk::ScrolledWindow());
   Gtk::Label *label3 = Gtk::manage(new class Gtk::Label(_("")));
   Gtk::Entry *entry = Gtk::manage(new class Gtk::Entry());
   Gtk::Button *Ask = Gtk::manage(new class Gtk::Button(_(" Fragen ")));
   Gtk::HBox *hbox1 = Gtk::manage(new class Gtk::HBox(false, 0));
   Gtk::VBox *vbox1 = Gtk::manage(new class Gtk::VBox(false, 0));
   
   menuitem4_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-new")));
   new = (Gtk::ImageMenuItem *)&menuitem4_menu->items().back();
   
   menuitem4_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-open")));
   open = (Gtk::ImageMenuItem *)&menuitem4_menu->items().back();
   
   menuitem4_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-save-as")));
   save = (Gtk::ImageMenuItem *)&menuitem4_menu->items().back();
   
   menuitem4_menu->items().push_back(Gtk::Menu_Helpers::SeparatorElem());
   separatormenuitem1 = (Gtk::MenuItem *)&menuitem4_menu->items().back();
   
   menuitem4_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-quit")));
   close = (Gtk::ImageMenuItem *)&menuitem4_menu->items().back();
   
   menuitem5_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-cut")));
   cut = (Gtk::ImageMenuItem *)&menuitem5_menu->items().back();
   
   menuitem5_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-copy")));
   copy = (Gtk::ImageMenuItem *)&menuitem5_menu->items().back();
   
   menuitem5_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-paste")));
   paste = (Gtk::ImageMenuItem *)&menuitem5_menu->items().back();
   
   menuitem5_menu->items().push_back(Gtk::Menu_Helpers::StockMenuElem(Gtk::StockID("gtk-delete")));
   delete = (Gtk::ImageMenuItem *)&menuitem5_menu->items().back();
   
   optionen1_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("Einstellungen")));
   einstellungen = (Gtk::MenuItem *)&optionen1_menu->items().back();
   
   menuitem7_menu->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Info")));
   info = (Gtk::MenuItem *)&menuitem7_menu->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Datei"), *menuitem4_menu));
   menuitem4 = (Gtk::MenuItem *)&menubar1->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Bearbeiten"), *menuitem5_menu));
   menuitem5 = (Gtk::MenuItem *)&menubar1->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem(_("Optionen"), *optionen1_menu));
   optionen1 = (Gtk::MenuItem *)&menubar1->items().back();
   
   menubar1->items().push_back(Gtk::Menu_Helpers::MenuElem(_("_Hilfe"), *menuitem7_menu));
   menuitem7 = (Gtk::MenuItem *)&menubar1->items().back();
   textview2->set_flags(Gtk::CAN_FOCUS);
   textview2->set_editable(true);
   textview2->set_cursor_visible(true);
   textview2->set_pixels_above_lines(0);
   textview2->set_pixels_below_lines(0);
   textview2->set_pixels_inside_wrap(0);
   textview2->set_left_margin(0);
   textview2->set_right_margin(0);
   textview2->set_indent(0);
   textview2->set_wrap_mode(Gtk::WRAP_NONE);
   textview2->set_justification(Gtk::JUSTIFY_LEFT);
   scrolledwindow3->set_flags(Gtk::CAN_FOCUS);
   scrolledwindow3->set_shadow_type(Gtk::SHADOW_IN);
   scrolledwindow3->set_policy(Gtk::POLICY_ALWAYS, Gtk::POLICY_ALWAYS);
   scrolledwindow3->property_window_placement().set_value(Gtk::CORNER_TOP_LEFT);
   scrolledwindow3->add(*textview2);
   label3->set_alignment(0.5,0.5);
   label3->set_padding(0,0);
   label3->set_justify(Gtk::JUSTIFY_LEFT);
   label3->set_line_wrap(false);
   label3->set_use_markup(false);
   label3->set_selectable(false);
   entry->set_flags(Gtk::CAN_FOCUS);
   entry->set_visibility(true);
   entry->set_editable(true);
   entry->set_max_length(0);
   entry->set_text(_(""));
   entry->set_has_frame(true);
   entry->set_activates_default(false);
   Ask->set_flags(Gtk::CAN_FOCUS);
   Ask->set_relief(Gtk::RELIEF_NORMAL);
   hbox1->pack_start(*label3, Gtk::PACK_SHRINK, 0);
   hbox1->pack_start(*entry);
   hbox1->pack_start(*Ask, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*menubar1, Gtk::PACK_SHRINK, 0);
   vbox1->pack_start(*scrolledwindow3);
   vbox1->pack_start(*hbox1, Gtk::PACK_SHRINK, 0);
   MainWindow->set_size_request(600,400);
   MainWindow->grab_focus();
   MainWindow->set_title(_("JEliza 2.1"));
   MainWindow->set_modal(false);
   MainWindow->property_window_position().set_value(Gtk::WIN_POS_NONE);
   MainWindow->set_resizable(true);
   MainWindow->property_destroy_with_parent().set_value(false);
   MainWindow->add(*vbox1);
   new->show();
   open->show();
   save->show();
   separatormenuitem1->show();
   close->show();
   menuitem4->show();
   cut->show();
   copy->show();
   paste->show();
   delete->show();
   menuitem5->show();
   einstellungen->show();
   optionen1->show();
   info->show();
   menuitem7->show();
   menubar1->show();
   textview2->show();
   scrolledwindow3->show();
   label3->show();
   entry->show();
   Ask->show();
   hbox1->show();
   vbox1->show();
   MainWindow->show();
   new->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_new_activate), false);
   open->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_open_activate), false);
   save->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_save_activate), false);
   close->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_close_activate), false);
   cut->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_cut_activate), false);
   copy->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_copy_activate), false);
   paste->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_paste_activate), false);
   delete->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_delete_activate), false);
   einstellungen->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_einstellungen_activate), false);
   info->signal_activate().connect(SigC::slot(*this, &MainWindow_glade::on_info_activate), false);
   entry->signal_enter_notify_event().connect(SigC::slot(*this, &MainWindow_glade::on_entry_enter_notify_event), false);
   Ask->signal_clicked().connect(SigC::slot(*this, &MainWindow_glade::on_Ask_clicked), false);
}

MainWindow_glade::~MainWindow_glade()
{  delete gmm_data;
}
